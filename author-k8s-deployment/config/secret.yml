#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")
#@ load("@ytt:yaml", "yaml")

#@ def signing_keys(jwt):
#@  if not hasattr(jwt, "policy") or not hasattr(jwt.policy, "activeKeyId"):
#@    assert.fail("jwt.policy.activeKeyId is required")
#@  end
#@
#@  if type(jwt.policy.keys) != "struct":
#@    assert.fail("jwt.policy.keys must be an object")
#@  end
#@
#@  return jwt.policy
#@ end

#@ def jwt_policy_file_contents():
jwt:
  token:
    policy: #@ signing_keys(data.values.jwt)
#@ end

---
apiVersion: v1
kind: Secret
metadata:
  name: uaa-jwt-policy-signing-keys
  annotations:
    #@ if hasattr(data.values, "uses"):
    uses_remaining: #@ str(data.values.uses)
    #@ else:
    uses_remaining: "20"
  #@ end
type: Opaque
stringData:
  jwt_policy_signing_keys.yml: #@ yaml.encode(jwt_policy_file_contents())
